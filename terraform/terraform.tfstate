{
  "version": 4,
  "terraform_version": "1.0.4",
  "serial": 25,
  "lineage": "fe8be609-e16b-e255-ec8e-be9daff84c06",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "kubectl_file_documents",
      "name": "deployment_file",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "# THESE ARE SAMPLE DATA WITH NO PROD VALUE\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql-initdb-config\n  namespace: ns-web-apps\ndata:\n  initdb.sql: |\n    USE blog; \n    CREATE TABLE blog_posts (idblog_posts INT NOT NULL, title VARCHAR(20), post_text TEXT, post_date TEXT, image_url TEXT, tags TEXT); \n    INSERT INTO blog_posts VALUES (1, 'first post', 'this is my first post', '2022-10-03', 'https://google.com', 'post;blogging;medium');\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-database\n  namespace: ns-web-apps\nspec:\n  selector:\n    app: mysql\n  ports:\n  - name: database-service-port\n    protocol: TCP\n    port: 3306\n    targetPort: database-port\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name:  database\n  namespace: ns-web-apps\n  labels:\n    app:  mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  replicas: 1\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app:  mysql\n    spec:\n      volumes:\n        - name: mysql-initdb\n          configMap:\n            name: mysql-initdb-config\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        imagePullPolicy: IfNotPresent\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: \"naosei\"\n          - name: MYSQL_DATABASE\n            value: \"blog\"\n          - name: MYSQL_USER\n            value: \"myapp-web\"\n          - name: MYSQL_PASSWORD\n            value: \"naosei\"\n        ports:\n        - name: database-port\n          containerPort: 3306\n        resources:\n          limits:\n            memory: \"1Gi\"\n            cpu: \"200m\"\n        volumeMounts:\n          - name: mysql-initdb\n            mountPath: /docker-entrypoint-initdb.d\n        readinessProbe:\n          tcpSocket:\n            port: database-port\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      restartPolicy: Always\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-myapp-web\n  namespace: ns-web-apps\nspec:\n  selector:\n    app: myapp-web\n  ports:\n  - name: my-app-service-port\n    protocol: TCP\n    port: 8080\n    targetPort: myapp-web-port\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: sec-myapp-web\n  namespace: ns-web-apps\ntype: Opaque\nstringData: \n  server.confi: |\n    myapp-web:naosei@tcp(svc-database.ns-web-apps.svc.cluster.local:3306)/blog?tls=skip-verify\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dp-myapp-web\n  namespace: ns-web-apps\n  labels:\n    app.kubernetes.io/name: MyApp-Web\nspec:\n  selector:\n    matchLabels:\n      app: myapp-web\n  template:\n    metadata:\n      labels:\n        app: myapp-web\n    spec:\n      volumes:\n        - name: myapp-web-secret\n          secret:\n            secretName: sec-myapp-web\n      initContainers:\n      - name: init-myservice\n        image: busybox:1.28\n        command: ['sh', '-c', \"echo 'waiting for myapp-web'; sleep 30; echo 'done'\"]\n      containers:\n      - name: myapp-web\n        image: myapp-web:latest\n        imagePullPolicy: IfNotPresent\n        resources:\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: myapp-web-secret\n          mountPath: \"/app/server.confi\"\n          subPath: \"server.confi\"\n          readOnly: true\n        ports:\n        - name: myapp-web-port\n          containerPort: 8080\n        readinessProbe:\n          tcpSocket:\n            port: myapp-web-port\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /\n            port: myapp-web-port\n            #httpHeaders:\n            #- name: Custom-Header\n            #  value: Awesome\n          initialDelaySeconds: 120\n          periodSeconds: 30\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/sh\",\"-c\",\"killall myapp-web; while killall -0 myapp-web; do sleep 2; done\"]\n      terminationGracePeriodSeconds: 30\n\n",
            "documents": [
              "# THESE ARE SAMPLE DATA WITH NO PROD VALUE\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql-initdb-config\n  namespace: ns-web-apps\ndata:\n  initdb.sql: |\n    USE blog; \n    CREATE TABLE blog_posts (idblog_posts INT NOT NULL, title VARCHAR(20), post_text TEXT, post_date TEXT, image_url TEXT, tags TEXT); \n    INSERT INTO blog_posts VALUES (1, 'first post', 'this is my first post', '2022-10-03', 'https://google.com', 'post;blogging;medium');",
              "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-database\n  namespace: ns-web-apps\nspec:\n  selector:\n    app: mysql\n  ports:\n  - name: database-service-port\n    protocol: TCP\n    port: 3306\n    targetPort: database-port",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name:  database\n  namespace: ns-web-apps\n  labels:\n    app:  mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  replicas: 1\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app:  mysql\n    spec:\n      volumes:\n        - name: mysql-initdb\n          configMap:\n            name: mysql-initdb-config\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        imagePullPolicy: IfNotPresent\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: \"naosei\"\n          - name: MYSQL_DATABASE\n            value: \"blog\"\n          - name: MYSQL_USER\n            value: \"myapp-web\"\n          - name: MYSQL_PASSWORD\n            value: \"naosei\"\n        ports:\n        - name: database-port\n          containerPort: 3306\n        resources:\n          limits:\n            memory: \"1Gi\"\n            cpu: \"200m\"\n        volumeMounts:\n          - name: mysql-initdb\n            mountPath: /docker-entrypoint-initdb.d\n        readinessProbe:\n          tcpSocket:\n            port: database-port\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      restartPolicy: Always",
              "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-myapp-web\n  namespace: ns-web-apps\nspec:\n  selector:\n    app: myapp-web\n  ports:\n  - name: my-app-service-port\n    protocol: TCP\n    port: 8080\n    targetPort: myapp-web-port",
              "apiVersion: v1\nkind: Secret\nmetadata:\n  name: sec-myapp-web\n  namespace: ns-web-apps\ntype: Opaque\nstringData: \n  server.confi: |\n    myapp-web:naosei@tcp(svc-database.ns-web-apps.svc.cluster.local:3306)/blog?tls=skip-verify",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dp-myapp-web\n  namespace: ns-web-apps\n  labels:\n    app.kubernetes.io/name: MyApp-Web\nspec:\n  selector:\n    matchLabels:\n      app: myapp-web\n  template:\n    metadata:\n      labels:\n        app: myapp-web\n    spec:\n      volumes:\n        - name: myapp-web-secret\n          secret:\n            secretName: sec-myapp-web\n      initContainers:\n      - name: init-myservice\n        image: busybox:1.28\n        command: ['sh', '-c', \"echo 'waiting for myapp-web'; sleep 30; echo 'done'\"]\n      containers:\n      - name: myapp-web\n        image: myapp-web:latest\n        imagePullPolicy: IfNotPresent\n        resources:\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: myapp-web-secret\n          mountPath: \"/app/server.confi\"\n          subPath: \"server.confi\"\n          readOnly: true\n        ports:\n        - name: myapp-web-port\n          containerPort: 8080\n        readinessProbe:\n          tcpSocket:\n            port: myapp-web-port\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /\n            port: myapp-web-port\n            #httpHeaders:\n            #- name: Custom-Header\n            #  value: Awesome\n          initialDelaySeconds: 120\n          periodSeconds: 30\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/sh\",\"-c\",\"killall myapp-web; while killall -0 myapp-web; do sleep 2; done\"]\n      terminationGracePeriodSeconds: 30"
            ],
            "id": "fa6aac1ebfef9adf34da5f54921313c933dcfac73a56025c3d4a639fc7735510",
            "manifests": {
              "/api/v1/namespaces/ns-web-apps/configmaps/mysql-initdb-config": "apiVersion: v1\ndata:\n  initdb.sql: \"USE blog; \\nCREATE TABLE blog_posts (idblog_posts INT NOT NULL, title\n    VARCHAR(20), post_text TEXT, post_date TEXT, image_url TEXT, tags TEXT); \\nINSERT\n    INTO blog_posts VALUES (1, 'first post', 'this is my first post', '2022-10-03',\n    'https://google.com', 'post;blogging;medium');\"\nkind: ConfigMap\nmetadata:\n  name: mysql-initdb-config\n  namespace: ns-web-apps\n",
              "/api/v1/namespaces/ns-web-apps/secrets/sec-myapp-web": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: sec-myapp-web\n  namespace: ns-web-apps\nstringData:\n  server.confi: myapp-web:naosei@tcp(svc-database.ns-web-apps.svc.cluster.local:3306)/blog?tls=skip-verify\ntype: Opaque\n",
              "/api/v1/namespaces/ns-web-apps/services/svc-database": "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-database\n  namespace: ns-web-apps\nspec:\n  ports:\n  - name: database-service-port\n    port: 3306\n    protocol: TCP\n    targetPort: database-port\n  selector:\n    app: mysql\n",
              "/api/v1/namespaces/ns-web-apps/services/svc-myapp-web": "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-myapp-web\n  namespace: ns-web-apps\nspec:\n  ports:\n  - name: my-app-service-port\n    port: 8080\n    protocol: TCP\n    targetPort: myapp-web-port\n  selector:\n    app: myapp-web\n",
              "/apis/apps/v1/namespaces/ns-web-apps/deployments/database": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: mysql\n  name: database\n  namespace: ns-web-apps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: naosei\n        - name: MYSQL_DATABASE\n          value: blog\n        - name: MYSQL_USER\n          value: myapp-web\n        - name: MYSQL_PASSWORD\n          value: naosei\n        image: mysql:8.0\n        imagePullPolicy: IfNotPresent\n        name: mysql\n        ports:\n        - containerPort: 3306\n          name: database-port\n        readinessProbe:\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          tcpSocket:\n            port: database-port\n        resources:\n          limits:\n            cpu: 200m\n            memory: 1Gi\n        volumeMounts:\n        - mountPath: /docker-entrypoint-initdb.d\n          name: mysql-initdb\n      restartPolicy: Always\n      volumes:\n      - configMap:\n          name: mysql-initdb-config\n        name: mysql-initdb\n",
              "/apis/apps/v1/namespaces/ns-web-apps/deployments/dp-myapp-web": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/name: MyApp-Web\n  name: dp-myapp-web\n  namespace: ns-web-apps\nspec:\n  selector:\n    matchLabels:\n      app: myapp-web\n  template:\n    metadata:\n      labels:\n        app: myapp-web\n    spec:\n      containers:\n      - image: myapp-web:latest\n        imagePullPolicy: IfNotPresent\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - /bin/sh\n              - -c\n              - killall myapp-web; while killall -0 myapp-web; do sleep 2; done\n        livenessProbe:\n          httpGet:\n            path: /\n            port: myapp-web-port\n          initialDelaySeconds: 120\n          periodSeconds: 30\n        name: myapp-web\n        ports:\n        - containerPort: 8080\n          name: myapp-web-port\n        readinessProbe:\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          tcpSocket:\n            port: myapp-web-port\n        resources:\n          limits:\n            cpu: 500m\n            memory: 128Mi\n        volumeMounts:\n        - mountPath: /app/server.confi\n          name: myapp-web-secret\n          readOnly: true\n          subPath: server.confi\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - echo 'waiting for myapp-web'; sleep 30; echo 'done'\n        image: busybox:1.28\n        name: init-myservice\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: myapp-web-secret\n        secret:\n          secretName: sec-myapp-web\n"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "kubectl_file_documents",
      "name": "namespace_file",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns-web-apps\n  labels:\n    app.kubernetes.io/name: Web-Apps",
            "documents": [
              "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns-web-apps\n  labels:\n    app.kubernetes.io/name: Web-Apps"
            ],
            "id": "403deb886a239bae9378f4a87b52e7a7aa7424489403d29ad447f94bdc57d316",
            "manifests": {
              "/api/v1/namespaces/ns-web-apps": "apiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    app.kubernetes.io/name: Web-Apps\n  name: ns-web-apps\n"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "deployment",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": "/api/v1/namespaces/ns-web-apps/configmaps/mysql-initdb-config",
          "schema_version": 1,
          "attributes": {
            "api_version": "v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/api/v1/namespaces/ns-web-apps/configmaps/mysql-initdb-config",
            "ignore_fields": null,
            "kind": "ConfigMap",
            "live_manifest_incluster": "3c950b84849e2871c3fcf5ae117cc919a5c6398cfe931477f27a2c9f2d0e457d",
            "live_uid": "43080988-7d16-45bd-b5e1-7fcd676d07ce",
            "name": "mysql-initdb-config",
            "namespace": "ns-web-apps",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "43080988-7d16-45bd-b5e1-7fcd676d07ce",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: v1\ndata:\n  initdb.sql: \"USE blog; \\nCREATE TABLE blog_posts (idblog_posts INT NOT NULL, title\n    VARCHAR(20), post_text TEXT, post_date TEXT, image_url TEXT, tags TEXT); \\nINSERT\n    INTO blog_posts VALUES (1, 'first post', 'this is my first post', '2022-10-03',\n    'https://google.com', 'post;blogging;medium');\"\nkind: ConfigMap\nmetadata:\n  name: mysql-initdb-config\n  namespace: ns-web-apps\n",
            "yaml_body_parsed": "apiVersion: v1\ndata:\n  initdb.sql: \"USE blog; \\nCREATE TABLE blog_posts (idblog_posts INT NOT NULL, title\n    VARCHAR(20), post_text TEXT, post_date TEXT, image_url TEXT, tags TEXT); \\nINSERT\n    INTO blog_posts VALUES (1, 'first post', 'this is my first post', '2022-10-03',\n    'https://google.com', 'post;blogging;medium');\"\nkind: ConfigMap\nmetadata:\n  name: mysql-initdb-config\n  namespace: ns-web-apps\n",
            "yaml_incluster": "3c950b84849e2871c3fcf5ae117cc919a5c6398cfe931477f27a2c9f2d0e457d"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.deployment_file"
          ]
        },
        {
          "index_key": "/api/v1/namespaces/ns-web-apps/secrets/sec-myapp-web",
          "schema_version": 1,
          "attributes": {
            "api_version": "v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/api/v1/namespaces/ns-web-apps/secrets/sec-myapp-web",
            "ignore_fields": null,
            "kind": "Secret",
            "live_manifest_incluster": "da8a583c48eaef378738ea11b12642c9d81a9fee2d1ebb643d312bca228bc1eb",
            "live_uid": "152c1949-7109-4df5-bf03-157e8a0f153c",
            "name": "sec-myapp-web",
            "namespace": "ns-web-apps",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "152c1949-7109-4df5-bf03-157e8a0f153c",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: sec-myapp-web\n  namespace: ns-web-apps\nstringData:\n  server.confi: myapp-web:naosei@tcp(svc-database.ns-web-apps.svc.cluster.local:3306)/blog?tls=skip-verify\ntype: Opaque\n",
            "yaml_body_parsed": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: sec-myapp-web\n  namespace: ns-web-apps\nstringData:\n  server.confi: myapp-web:naosei@tcp(svc-database.ns-web-apps.svc.cluster.local:3306)/blog?tls=skip-verify\ntype: Opaque\n",
            "yaml_incluster": "da8a583c48eaef378738ea11b12642c9d81a9fee2d1ebb643d312bca228bc1eb"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.deployment_file"
          ]
        },
        {
          "index_key": "/api/v1/namespaces/ns-web-apps/services/svc-database",
          "schema_version": 1,
          "attributes": {
            "api_version": "v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/api/v1/namespaces/ns-web-apps/services/svc-database",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "e5ef221a7e74c4f4b7cdb4f714da2a3053748868229edf89b33344ba13fc4369",
            "live_uid": "b316e50a-6005-48a3-b9f9-a24202b621a2",
            "name": "svc-database",
            "namespace": "ns-web-apps",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "b316e50a-6005-48a3-b9f9-a24202b621a2",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-database\n  namespace: ns-web-apps\nspec:\n  ports:\n  - name: database-service-port\n    port: 3306\n    protocol: TCP\n    targetPort: database-port\n  selector:\n    app: mysql\n",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-database\n  namespace: ns-web-apps\nspec:\n  ports:\n  - name: database-service-port\n    port: 3306\n    protocol: TCP\n    targetPort: database-port\n  selector:\n    app: mysql\n",
            "yaml_incluster": "e5ef221a7e74c4f4b7cdb4f714da2a3053748868229edf89b33344ba13fc4369"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.deployment_file"
          ]
        },
        {
          "index_key": "/api/v1/namespaces/ns-web-apps/services/svc-myapp-web",
          "schema_version": 1,
          "attributes": {
            "api_version": "v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/api/v1/namespaces/ns-web-apps/services/svc-myapp-web",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "cfc8b8b79be164304eee0e3c71f94198988400a52970d00722392ccba4668f76",
            "live_uid": "38f7962e-0ed4-4746-bf83-2759c10e0740",
            "name": "svc-myapp-web",
            "namespace": "ns-web-apps",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "38f7962e-0ed4-4746-bf83-2759c10e0740",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-myapp-web\n  namespace: ns-web-apps\nspec:\n  ports:\n  - name: my-app-service-port\n    port: 8080\n    protocol: TCP\n    targetPort: myapp-web-port\n  selector:\n    app: myapp-web\n",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  name: svc-myapp-web\n  namespace: ns-web-apps\nspec:\n  ports:\n  - name: my-app-service-port\n    port: 8080\n    protocol: TCP\n    targetPort: myapp-web-port\n  selector:\n    app: myapp-web\n",
            "yaml_incluster": "cfc8b8b79be164304eee0e3c71f94198988400a52970d00722392ccba4668f76"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.deployment_file"
          ]
        },
        {
          "index_key": "/apis/apps/v1/namespaces/ns-web-apps/deployments/database",
          "schema_version": 1,
          "attributes": {
            "api_version": "apps/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/ns-web-apps/deployments/database",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "bc8f0f65ff6ba117fee38bef8f134bc9195eff065f15a95a904afe257e08aaf9",
            "live_uid": "1dcbbc42-2d13-4172-bddc-64c554ccaae3",
            "name": "database",
            "namespace": "ns-web-apps",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "1dcbbc42-2d13-4172-bddc-64c554ccaae3",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: mysql\n  name: database\n  namespace: ns-web-apps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: naosei\n        - name: MYSQL_DATABASE\n          value: blog\n        - name: MYSQL_USER\n          value: myapp-web\n        - name: MYSQL_PASSWORD\n          value: naosei\n        image: mysql:8.0\n        imagePullPolicy: IfNotPresent\n        name: mysql\n        ports:\n        - containerPort: 3306\n          name: database-port\n        readinessProbe:\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          tcpSocket:\n            port: database-port\n        resources:\n          limits:\n            cpu: 200m\n            memory: 1Gi\n        volumeMounts:\n        - mountPath: /docker-entrypoint-initdb.d\n          name: mysql-initdb\n      restartPolicy: Always\n      volumes:\n      - configMap:\n          name: mysql-initdb-config\n        name: mysql-initdb\n",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: mysql\n  name: database\n  namespace: ns-web-apps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: naosei\n        - name: MYSQL_DATABASE\n          value: blog\n        - name: MYSQL_USER\n          value: myapp-web\n        - name: MYSQL_PASSWORD\n          value: naosei\n        image: mysql:8.0\n        imagePullPolicy: IfNotPresent\n        name: mysql\n        ports:\n        - containerPort: 3306\n          name: database-port\n        readinessProbe:\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          tcpSocket:\n            port: database-port\n        resources:\n          limits:\n            cpu: 200m\n            memory: 1Gi\n        volumeMounts:\n        - mountPath: /docker-entrypoint-initdb.d\n          name: mysql-initdb\n      restartPolicy: Always\n      volumes:\n      - configMap:\n          name: mysql-initdb-config\n        name: mysql-initdb\n",
            "yaml_incluster": "bc8f0f65ff6ba117fee38bef8f134bc9195eff065f15a95a904afe257e08aaf9"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.deployment_file"
          ]
        },
        {
          "index_key": "/apis/apps/v1/namespaces/ns-web-apps/deployments/dp-myapp-web",
          "schema_version": 1,
          "attributes": {
            "api_version": "apps/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/ns-web-apps/deployments/dp-myapp-web",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "e09dde24b52df040499e6b68c258ba24854136357c471dd7d59cc99b85bd846a",
            "live_uid": "39830c8d-db9b-4080-a558-e4dfc5681b5d",
            "name": "dp-myapp-web",
            "namespace": "ns-web-apps",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "39830c8d-db9b-4080-a558-e4dfc5681b5d",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/name: MyApp-Web\n  name: dp-myapp-web\n  namespace: ns-web-apps\nspec:\n  selector:\n    matchLabels:\n      app: myapp-web\n  template:\n    metadata:\n      labels:\n        app: myapp-web\n    spec:\n      containers:\n      - image: myapp-web:latest\n        imagePullPolicy: IfNotPresent\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - /bin/sh\n              - -c\n              - killall myapp-web; while killall -0 myapp-web; do sleep 2; done\n        livenessProbe:\n          httpGet:\n            path: /\n            port: myapp-web-port\n          initialDelaySeconds: 120\n          periodSeconds: 30\n        name: myapp-web\n        ports:\n        - containerPort: 8080\n          name: myapp-web-port\n        readinessProbe:\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          tcpSocket:\n            port: myapp-web-port\n        resources:\n          limits:\n            cpu: 500m\n            memory: 128Mi\n        volumeMounts:\n        - mountPath: /app/server.confi\n          name: myapp-web-secret\n          readOnly: true\n          subPath: server.confi\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - echo 'waiting for myapp-web'; sleep 30; echo 'done'\n        image: busybox:1.28\n        name: init-myservice\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: myapp-web-secret\n        secret:\n          secretName: sec-myapp-web\n",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/name: MyApp-Web\n  name: dp-myapp-web\n  namespace: ns-web-apps\nspec:\n  selector:\n    matchLabels:\n      app: myapp-web\n  template:\n    metadata:\n      labels:\n        app: myapp-web\n    spec:\n      containers:\n      - image: myapp-web:latest\n        imagePullPolicy: IfNotPresent\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - /bin/sh\n              - -c\n              - killall myapp-web; while killall -0 myapp-web; do sleep 2; done\n        livenessProbe:\n          httpGet:\n            path: /\n            port: myapp-web-port\n          initialDelaySeconds: 120\n          periodSeconds: 30\n        name: myapp-web\n        ports:\n        - containerPort: 8080\n          name: myapp-web-port\n        readinessProbe:\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          tcpSocket:\n            port: myapp-web-port\n        resources:\n          limits:\n            cpu: 500m\n            memory: 128Mi\n        volumeMounts:\n        - mountPath: /app/server.confi\n          name: myapp-web-secret\n          readOnly: true\n          subPath: server.confi\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - echo 'waiting for myapp-web'; sleep 30; echo 'done'\n        image: busybox:1.28\n        name: init-myservice\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: myapp-web-secret\n        secret:\n          secretName: sec-myapp-web\n",
            "yaml_incluster": "e09dde24b52df040499e6b68c258ba24854136357c471dd7d59cc99b85bd846a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.deployment_file"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "namespace",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": "/api/v1/namespaces/ns-web-apps",
          "schema_version": 1,
          "attributes": {
            "api_version": "v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/api/v1/namespaces/ns-web-apps",
            "ignore_fields": null,
            "kind": "Namespace",
            "live_manifest_incluster": "abb53cba1f5e9d821091a699346d66716eb04d513cb12f88bf91f71f26e41ad8",
            "live_uid": "c14dc1bb-8672-457b-a580-57d3b4311d02",
            "name": "ns-web-apps",
            "namespace": null,
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "c14dc1bb-8672-457b-a580-57d3b4311d02",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    app.kubernetes.io/name: Web-Apps\n  name: ns-web-apps\n",
            "yaml_body_parsed": "apiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    app.kubernetes.io/name: Web-Apps\n  name: ns-web-apps\n",
            "yaml_incluster": "abb53cba1f5e9d821091a699346d66716eb04d513cb12f88bf91f71f26e41ad8"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.kubectl_file_documents.namespace_file"
          ]
        }
      ]
    }
  ]
}
